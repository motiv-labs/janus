name: Testing

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53.3

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint]

    services:
      mongo:
        image: mongo:3
        ports:
          - "27017"
        options: >-
          --health-cmd "mongo localhost:27017/test --quiet --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      upstreams:
        image: rodolpheche/wiremock:2.27.0-alpine
        ports:
          - "8080"

      auth_service:
        image: rodolpheche/wiremock:2.27.0-alpine
        ports:
          - "8080"

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: Check out code
        uses: actions/checkout@v3
      - name: Run unit tests
        if: success()
        run: make test-unit
      - name: Run integration tests
        if: success()
        run: make test-integration
        env:
          DYNAMIC_UPSTREAMS_PORT: ${{ job.services.upstreams.ports[8080] }}
          DYNAMIC_AUTH_PORT: ${{ job.services.auth_service.ports[8080] }}
      - name: Run features tests
        if: success()
        run: make test-features
        env:
          DYNAMIC_MONGO_PORT: ${{ job.services.mongo.ports[27017] }}
          DYNAMIC_UPSTREAMS_PORT: ${{ job.services.upstreams.ports[8080] }}
          DYNAMIC_AUTH_PORT: ${{ job.services.auth_service.ports[8080] }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        if: success()
        with:
          file: ./coverage.txt
          fail_ci_if_error: false
